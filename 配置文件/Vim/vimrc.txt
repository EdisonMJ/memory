" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" 状态条
Plug 'vim-airline/vim-airline'

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

" 自动生成tags
Plug 'ludovicchabant/vim-gutentags'

" 静态检查
Plug 'w0rp/ale' , { 'for': ['c', 'rust'] }

" rust 代码补全
Plug 'racer-rust/vim-racer', { 'for': 'rust' }

" Initialize plugin system
call plug#end()


" 打开语法高亮
syntax on


" 设置补全
set complete=t
set completeopt =menu,preview,noselect
" 按下 Ctrl+p 时的背景色
hi Pmenu ctermfg=black ctermbg=gray  guibg=#444444
hi PmenuSel ctermfg=7 ctermbg=4 guibg=#555555 guifg=#ffffff


" 显示行号
set nu


" 总是显示状态行
set laststatus=2


" 以下三个配置配合使用，设置tab和缩进空格数
set expandtab  " 转换tab为空格
set shiftwidth=4  " 设置空格数
set softtabstop=4 " 按一次退格键会删除4个空格，只对tab按出来的有效


" airline config
set noshowmode  " 不显示模式
let g:airline_powerline_fonts = 1
"let g:airline_section_x = ''
let g:airline_section_warning = ''
let g:airline_section_error = ''


" 树状目录快捷键 Alt+1
map 1 :NERDTreeMirror<CR>
map 1 :NERDTreeToggle<CR>


" 自动生成tags，在 ~/.cache/tags 目录下
" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'
" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags
" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
" 检测 ~/.cache/tags 不存在就新建
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif


" 静态检查
"let g:ale_completion_enabled = 1
let g:ale_sign_column = 0
let g:ale_linters_explicit = 1
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:airline#extensions#ale#enabled = 1
let g:ale_linters = {
\   'c': ['gcc'],
\   'rust': ['cargo'],
\}
let g:ale_c_gcc_options = '-Wall'
let g:ale_rust_cargo_use_check = 1

" rust
" 手动补全和定义跳转
set hidden
" 这一行指的是你编译出来的racer所在的路径
let g:racer_cmd = '/usr/bin/racer'
" rust 源码位置
let $RUST_SRC_PATH = '/usr/lib/rustlib/src/rust/src'

